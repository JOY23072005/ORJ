import React, { useState, useRef } from 'react';
import { 
  ChevronRight, 
  ChevronDown, 
  File, 
  Folder, 
  FolderOpen,
  Plus,
  MoreHorizontal,
  Edit3,
  Trash2,
  Copy
} from 'lucide-react';

import { getFileTypeInfo,type FileTypeInfo, type FileType,type FileNode  } from '../lib/utility.ts';
import {useFileTree} from "../context/FileTreeContext.tsx" 


interface FileIconProps {
  fileName: string;
  className?: string;
}

interface FileTreeNodeProps {
  node: FileNode;
  level?: number;
  onToggle: (id: string) => void;
  onSelect: (id: string) => void;
  selectedId: string | null;
  onContextMenu: (e: React.MouseEvent, node: FileNode) => void;
  onRename: (id: string, newName: string) => void;
  onDelete: (id: string) => void;
  onAddFile: (parentId: string) => void;
  onAddFolder: (parentId: string) => void;
}

interface FileTreeProps {
  onFileSelect: (node: FileNode) => void
}

const FileIcon: React.FC<FileIconProps> = ({ fileName, className = "" }) => {
  const fileTypeInfo: FileTypeInfo = getFileTypeInfo(fileName);
  const iconClass: string = `w-4 h-4 ${className}`;
  
  switch (fileTypeInfo.type) {
    case 'javascript':
    case 'typescript':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'css':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'html':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'json':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'markdown':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'python':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'java':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'cpp':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'csharp':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'php':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'ruby':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'go':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'rust':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'swift':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'shell':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'xml':
    case 'yaml':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'dockerfile':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'config':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'image':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'video':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'audio':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'pdf':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'archive':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'text':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    default:
      return <File className={`${iconClass} text-gray-500`} />;
  }
};

const FileTreeNode: React.FC<FileTreeNodeProps> = ({ 
  node, 
  level = 0, 
  onToggle, 
  onSelect, 
  selectedId, 
  onContextMenu,
  onRename,
  onDelete,
  onAddFile,
  onAddFolder 
}) => {
  const [isRenaming, setIsRenaming] = useState(false);
  const [newName, setNewName] = useState(node.name);
  const [showContextMenu, setShowContextMenu] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);

  const handleToggle = (e: React.MouseEvent) => {
    e.stopPropagation();
    onToggle(node.id);
  };

  const handleSelect = () => {
    onSelect(node.id);
  };

  const handleRename = () => {
    if (newName.trim() && newName !== node.name) {
      onRename(node.id, newName.trim());
    }
    setIsRenaming(false);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleRename();
    } else if (e.key === 'Escape') {
      setNewName(node.name);
      setIsRenaming(false);
    }
  };

  const handleContextMenu = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setShowContextMenu(true);
    onContextMenu(e, node);
  };

  const startRename = () => {
    setIsRenaming(true);
    setShowContextMenu(false);
    setTimeout(() => inputRef.current?.focus(), 0);
  };

  const paddingLeft = level * 16;

  return (
    <div className="relative">
      <div
        className={`flex items-center py-1 px-2 hover:bg-secondary-600/10 cursor-pointer select-none relative group ${
          selectedId === node.id ? 'bg-secondary-900/30 border-r-2 border-primary-500' : ''
        }`}
        style={{ paddingLeft: paddingLeft + 8 }}
        onClick={handleSelect}
        onContextMenu={handleContextMenu}
      >
        {node.type === 'folder' && (
          <button
            onClick={handleToggle}
            className=" flex items-center justify-center w-4 h-4 mr-1 hover:bg-gray-200 rounded"
          >
            {node.isOpen ? (
              <ChevronDown className="w-3 h-3 text-gray-600" />
            ) : (
              <ChevronRight className="w-3 h-3 text-gray-600" />
            )}
          </button>
        )}
        
        {node.type === 'file' && <div className="w-4 h-4 mr-1" />}
        
        <div className="flex items-center mr-2">
          {node.type === 'folder' ? (
            node.isOpen ? (
              <FolderOpen className="w-4 h-4 text-primary-600" />
            ) : (
              <Folder className="w-4 h-4 text-primary-600" />
            )
          ) : (
            <FileIcon fileName={node.name} />
          )}
        </div>
        
        {isRenaming ? (
          <input
            ref={inputRef}
            type="text"
            value={newName}
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewName(e.target.value)}
            onBlur={handleRename}
            onKeyDown={handleKeyDown}
            className="flex-1 px-1 py-0.5 text-sm border border-primary-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
            onClick={(e: React.MouseEvent) => e.stopPropagation()}
          />
        ) : (
          <span className="flex-1 text-sm text-primary-100 truncate">{node.name}</span>
        )}
        
        {!isRenaming && (
          <button
            onClick={(e: React.MouseEvent) => {
              e.stopPropagation();
              setShowContextMenu(!showContextMenu);
            }}
            className="opacity-0 group-hover:opacity-100 p-1 hover:bg-gray-200 rounded transition-opacity"
          >
            <MoreHorizontal className="w-3 h-3 text-gray-500" />
          </button>
        )}
      </div>
      
      {showContextMenu && (
        <div className="absolute top-full left-0 z-50 bg-white border border-gray-200 rounded-md shadow-lg py-1 min-w-[150px]">
          <button
            onClick={startRename}
            className="flex items-center w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
          >
            <Edit3 className="w-4 h-4 mr-2" />
            Rename
          </button>
          <button
            onClick={() => {
              onDelete(node.id);
              setShowContextMenu(false);
            }}
            className="flex items-center w-full px-3 py-2 text-sm text-red-600 hover:bg-gray-100"
          >
            <Trash2 className="w-4 h-4 mr-2" />
            Delete
          </button>
          {node.type === 'folder' && (
            <>
              <hr className="my-1 border-gray-200" />
              <button
                onClick={() => {
                  onAddFile(node.id);
                  setShowContextMenu(false);
                }}
                className="flex items-center w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                <File className="w-4 h-4 mr-2" />
                New File
              </button>
              <button
                onClick={() => {
                  onAddFolder(node.id);
                  setShowContextMenu(false);
                }}
                className="flex items-center w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                <Folder className="w-4 h-4 mr-2" />
                New Folder
              </button>
            </>
          )}
        </div>
      )}
      
      {node.children && node.isOpen && (
        <div>
          {node.children.map((child) => (
            <FileTreeNode
              key={child.id}
              node={child}
              level={level + 1}
              onToggle={onToggle}
              onSelect={onSelect}
              selectedId={selectedId}
              onContextMenu={onContextMenu}
              onRename={onRename}
              onDelete={onDelete}
              onAddFile={onAddFile}
              onAddFolder={onAddFolder}
            />
          ))}
        </div>
      )}
    </div>
  );
};

const FileTree: React.FC<FileTreeProps> = ({  onFileSelect }) => {
  const {fileTree,setFileTree} = useFileTree();
  const [selectedId, setSelectedId] = useState<string | null>(null);

  const findNodeById = (nodes: FileNode[], id: string): FileNode | null => {
    for (const node of nodes) {
      if (node.id === id) return node;
      if (node.children) {
        const found = findNodeById(node.children, id);
        if (found) return found;
      }
    }
    return null;
  };

  const updateTree = (nodes: FileNode[], id: string, updater: (node: FileNode) => FileNode): FileNode[] => {
    return nodes.map(node => {
      if (node.id === id) {
        return updater(node);
      }
      if (node.children) {
        return {
          ...node,
          children: updateTree(node.children, id, updater)
        };
      }
      return node;
    });
  };

  const removeFromTree = (nodes: FileNode[], id: string): FileNode[] => {
    return nodes.filter(node => {
      if (node.id === id) return false;
      if (node.children) {
        return {
          ...node,
          children: removeFromTree(node.children, id)
        };
      }
      return true;
    }).map(node => {
      if (node.children) {
        return {
          ...node,
          children: removeFromTree(node.children, id)
        };
      }
      return node;
    });
  };

  const handleToggle = (id: string) => {
    setFileTree(prev => updateTree(prev, id, node => ({
      ...node,
      isOpen: !node.isOpen
    })));
  };

  const handleSelect = (id: string) => {
    setSelectedId(id);
    const node = findNodeById(fileTree, id);
    if (node && node.type === 'file') {
      onFileSelect?.(node);
    }
  };

  const handleRename = (id: string, newName: string) => {
    setFileTree(prev => updateTree(prev, id, node => ({
      ...node,
      name: newName
    })));
  };

  const handleDelete = (id: string) => {
    setFileTree(prev => removeFromTree(prev, id));
    if (selectedId === id) {
      setSelectedId(null);
    }
  };

  const addToTree = (nodes: FileNode[], parentId: string, newNode: FileNode): FileNode[] => {
    return nodes.map(node => {
      if (node.id === parentId) {
        newNode.path=node.path.concat(`/${newNode.name}`);
        return {
          ...node,
          children: [...(node.children || []), newNode],
          isOpen: true,
        };
      }
      if (node.children) {
        return {
          ...node,
          children: addToTree(node.children, parentId, newNode)
        };
      }
      return node;
    });
  };

  const handleAddFile = (parentId: string) => {
    const newId = Date.now().toString();
    const newFile: FileNode = {
      id: newId,
      name: 'new-file.txt',
      type: 'file',
      path:''
    };
    
    setFileTree(prev => addToTree(prev, parentId, newFile));
  };

  const handleAddFolder = (parentId: string) => {
    const newId = Date.now().toString();
    const newFolder: FileNode = {
      id: newId,
      name: 'new-folder',
      type: 'folder',
      isOpen: true,
      children: [],
      path:''
    };
    
    setFileTree(prev => addToTree(prev, parentId, newFolder));
  };

  const handleContextMenu = (e: React.MouseEvent, node: FileNode) => {
    // Context menu handling is done in the FileTreeNode component
  };

  return (
    <div className="h-full bg-[#181818] overflow-y-auto">
      <div className="h-10 p-3 bg-gray-800 text-secondary-500">
        <div className="flex items-center justify-between">
          <h3 className="text-sm font-medium ">Files</h3>
          <div className="flex items-center space-x-1">
            <button
              onClick={() => handleAddFile(fileTree[0]?.id)}
              className="p-1 btn btn-secondary rounded"
              title="New File"
            >
              <File className="w-4 h-4 text-gray-600" />
            </button>
            <button
              onClick={() => handleAddFolder(fileTree[0]?.id)}
              className="p-1 btn btn-secondary rounded"
              title="New Folder"
            >
              <Folder className="w-4 h-4 text-gray-600" />
            </button>
          </div>
        </div>
      </div>
      
      <div className="py-2">
        {fileTree.map((node) => (
          <FileTreeNode
            key={node.id}
            node={node}
            onToggle={handleToggle}
            onSelect={handleSelect}
            selectedId={selectedId}
            onContextMenu={handleContextMenu}
            onRename={handleRename}
            onDelete={handleDelete}
            onAddFile={handleAddFile}
            onAddFolder={handleAddFolder}
          />
        ))}
      </div>
    </div>
  );
};
export default FileTree;